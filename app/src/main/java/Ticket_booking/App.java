/*
 * This source file was generated by the Gradle 'init' task
 */
package Ticket_booking;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Scanner;
import java.util.UUID;

import Ticket_booking.entities.Ticket;
import Ticket_booking.entities.Train;
import Ticket_booking.entities.User;
import Ticket_booking.services.TicketService;
import Ticket_booking.services.TrainService;
import Ticket_booking.services.UserBookingService;
import Ticket_booking.util.UserServiceUtil;

public class App {

        
    public static void main(String[] args) throws InterruptedException {
        System.out.println("Running the train booking system");
        try (Scanner sc = new Scanner(System.in)) {
            UserBookingService userBookingService;
            try {
                userBookingService = new UserBookingService();
            }catch(IOException e) {
                System.err.println(e.getMessage());
                System.err.println("Something went wrong!!!");
                return;
            }

            int option = 0;
            System.out.println("Choose the option (Sign up or Sign in)");
            System.out.println("1.Sign Up");
            System.out.println("2.Sign In");
            option = sc.nextInt();
            User currUser = null;
            if(option==1) {
                System.out.println("Enter the username to sign up");
                String nameToSignUp = sc.next();
                System.out.println("Enter the password to sign up");
                String passToSignUp = sc.next();
                User userToSignUp =  new User(nameToSignUp,passToSignUp,UserServiceUtil.hashPassword(passToSignUp)
                ,new ArrayList<>(),UUID.randomUUID().toString());
                userBookingService.signUp(userToSignUp);
                System.out.println("Signing up the user...");
                Thread.sleep(1000);
                System.out.println("Current user is: "+userToSignUp.getName()+ " with user ID: "+userToSignUp.getUserID());    

                currUser = userToSignUp;
            }
            else if(option==2) {
                System.out.println("Enter the username to sign in");
                String nameToSignIn = sc.next();
                System.out.println("Enter the password to sign in");
                String passToSignIn = sc.next();

                Optional<User> signedUser = userBookingService.signIn(nameToSignIn,passToSignIn);

                if(signedUser.isPresent()) {
                    System.out.println("User login Successful...");
                    Thread.sleep(1000);
                    System.out.println("current user:"+signedUser.get().getName());
                    Thread.sleep(1000);
                    currUser = signedUser.get();
                }

                else {
                    System.err.println("UserName or Password is invalid...!");
                    return;
                }
            }
            else {
                System.err.println("Invalid option!");
                return;
            }

            try {
                userBookingService = new UserBookingService(currUser);
            } catch (IOException e) {
                return;
            }
            Train trainSelectedForBooking = new Train();
            String source = null,destination=null;
            Ticket bookedTicket = null;
            TrainService trainService;
            try {
                trainService = new TrainService();
            } catch (IOException e) {
                System.err.println("Something went wrong...");
                return;
            }

            while (option!=5) {
                System.out.println();
                System.out.println("Choose the option");
                System.out.println("1.Fetch Bookings");
                System.out.println("2.Search Trains");
                System.out.println("3.Book a Seat");
                System.out.println("4.Cancel Bookings");
                System.out.println("5.Exit the App");
                option = sc.nextInt();

                switch (option) {
                    case 1:
                    
                        System.out.println("Fetching Bookings...");
                        userBookingService.fetchBookings();
                        Thread.sleep(1000);
                        break;
                    case 2 :
                        int trainOption = 0;
                        System.out.println("choose the option");
                        System.out.println("1.Search trains by train number");
                        System.out.println("2.Search trains by source and destination");
                        trainOption = sc.nextInt();

                        
                        if (trainOption==1) {
                            System.out.println("Enter the train number");
                            int trainNum = sc.nextInt();
                            Train train = null;
                            Optional<Train> trainOptional = trainService.searchTrainByNum(trainNum);
                            if (trainOptional.isPresent()) {
                                train = trainOptional.get();
                                System.out.println(trainService.getTrainInfo(train));
                                trainService.printStations(train);
                                
                            } else {
                                System.err.println("No train found with number: " + trainNum);
                                Thread.sleep(1000);
                                continue;
                            }
                            String conform = null;
                            System.out.println("Do you want to book a seat in this train?(y/n)");
                            conform = sc.next();
                            if ( conform.equals("y")) {
                                System.out.println("Enter your journey's source station");
                                source = sc.next();
                                System.out.println("Enter your journey's destination station");
                                destination = sc.next();

                                if(!trainService.trainValidator(train, source, destination)) {
                                    System.err.println("journey stations dont match the chosen train stations");
                                    Thread.sleep(1000);
                                    continue;
                                }

                                trainSelectedForBooking = train;
                            }
                            else if (conform.equals("n")) {
                                System.out.println("Sending you back to main menu...");
                                Thread.sleep(1000);
                                continue;
                            }

                            else {
                                System.err.println("Invalid Input...");
                                Thread.sleep(1000);
                                continue;
                            }

                        }
                        else if (trainOption==2) {
                            System.out.println("Enter the source station");
                            source = sc.next();
                            System.out.println("Enter the destination station");
                            destination = sc.next();

                            List<Train> trainList = trainService.searchTrainBySD(source, destination);
                            for(int i =0;i<trainList.size();i++) {
                                System.out.print(i+1+".");
                                System.out.println(trainService.getTrainInfo(trainList.get(i)));
                                trainService.printStations(trainList.get(i));
                            }
                            System.out.println("Enter the index of train chosen by you stating from 1 ");
                            int selectedIndex = sc.nextInt()-1;
                            
                            if (selectedIndex < 0 || selectedIndex >= trainList.size()) {
                                System.err.println("Invalid train selection.");
                                Thread.sleep(1000);
                                continue;
                            }    
                            
                            String conform = null;
                            System.out.println("Do you want to book a seat in this train?(y/n)");
                            conform = sc.next();
                            if ( conform.equals("y")) {
                                System.out.println("Enter your journey's source station(default: train source)");
                                source = sc.next();
                                System.out.println("Enter your journey's destination station(default: train destination)");
                                destination = sc.next();
                                //check if stations source and destination exist in train or not
                                if(!trainService.trainValidator(trainList.get(selectedIndex), source, destination)) {
                                    System.err.println("The Stations entered are invalid");
                                    Thread.sleep(1000);
                                    continue;
                                }

                                trainSelectedForBooking = trainList.get(selectedIndex);
                            }
                            else if (conform.equals("n")) {
                                System.out.println("Sending you back to main menu...");
                                Thread.sleep(1000);
                                continue;
                            }

                            else {
                                System.err.println("Invalid Input...");
                                Thread.sleep(1000);
                                continue;
                            }

                        }   
                        else {
                            System.err.println("Wrong option chosen...");
                            Thread.sleep(1000);
                            continue;
                        }
                        break;
                    case 3:
                        if(trainSelectedForBooking == null) {
                            System.err.println("choose train for booking first");
                            Thread.sleep(1000);
                            continue;
                        }
                        System.out.println("choose which tier would you like to book in");
                        System.out.println("1.General");
                        System.out.println("2.Sleeper");
                        System.out.println("3.3rd AC");
                        System.out.println("4.2nd AC");
                        System.out.println("5.1st AC");
                        int tierBook = sc.nextInt();
                        if(tierBook <1 || tierBook>5) {
                            System.out.println("Wrong Option Chosen...");
                            continue;
                        }
                        String[] tiers = {"General", "Sleeper", "3rd AC", "2nd AC", "1st AC"};
                        String tier = tiers[tierBook - 1];

                        System.out.println("Booking a seat for you...");
                        List<List<Boolean>> seats = userBookingService.fetchSeats(trainSelectedForBooking,tierBook);
                        if (seats == null) {
                            System.err.println("Seats information is unavailable for this train.");
                            continue;
                        }
                        userBookingService.randomSeatAllocator(seats); // to randomly allocate seats
                        System.out.println("Thank You!!");

                        // to update the train 
                        if( trainSelectedForBooking!=null) {
                            trainSelectedForBooking.setSeats(seats);
                        }
                        try {
                            trainService = new TrainService(trainSelectedForBooking);
                            trainService.updateTrain();
                        } catch (IOException e) {
                            System.err.println("Something went Wrong...");
                            continue;
                        }
                        
                        
                        bookedTicket = new Ticket(UUID.randomUUID().toString(),currUser.getUserID(),source,destination,
                        trainSelectedForBooking.getStation_Times().get(source),tier,trainSelectedForBooking);

                        userBookingService.addBookings(bookedTicket);
                        
                        
                        TicketService ticketService = new TicketService(bookedTicket);
                        ticketService.getTicketInfo();
                        break;
                    case 4:
                        String ticketID;
                        if(currUser.getTicketBooked().isEmpty()) {
                            System.err.println("No ticket to cancel.");
                            continue;
                        }
                        else {
                            System.out.println("Enter the ticket ID to cancel that ticket");
                            ticketID = sc.next();
                        }

                        System.out.println("Canceling the ticket...");
                        userBookingService.cancelBookings(ticketID);
                        break;
                    case 5:
                        System.out.println("Exiting...");
                        return;
                    default:
                        System.out.println("Invalid Option...");
                        continue;
                }
            }
        }
    }
}    
